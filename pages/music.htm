<!DOCTYPE html>
<html data-lt-installed="true"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<title>Last.FM Now Playing</title>
		<meta charset="UTF-8">
		<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.8.1/socket.io.js" integrity="sha512-8BHxHDLsOHx+flIrQ0DrZcea7MkHqRU5GbTHmbdzMRnAaoCIkZ97PqZcXJkKZckMMhqfoeaJE+DNUVuyoQsO3Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	</head>
	<body>
		<div class="grandinfo">
			<div class="info hide">
				<div class="album-container">
					<img class="logo" id="logo" src="logo.svg">
				</div>
				<div class="text-container">
					<div class="text">
						<span class="artist" id="artist">Now</span>
						<span class="title" id="title">Playing</span>
						<div class="lyrics" id="lyrics">
							<div class="lyric-wrapper" id="lyric-wrapper"></div>
						</div>
						<div id="subtext" class="subtext"></div>
					</div>
				</div>
				<div class="progress-bar">
					<div class="progress-fill"></div>
				</div>
			</div>
		</div>
		<style>
			* {
				box-sizing: border-box;
			}

			body {
				background: transparent;
				color: white;
				border: 0 transparent;
				padding: 0;
				margin: 0;
				text-align: center;
				overflow: hidden;
				font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", sans-serif;
				font-weight: 400;
				display: flex;
				justify-content: center;
				align-items: center;
				width: 100vw;
				height: 100vh;
				letter-spacing: -0.02em;
			}

			.subtext {
				margin-top: auto;
				color: white;
				font-size: 2rem;
				opacity: 0.8;
				text-align: center;
				white-space: nowrap;
				overflow: hidden;
				text-overflow: ellipsis;
				pointer-events: none;
				font-weight: 400;
				font-style: italic;
				transition: opacity 0.3s ease-in-out;
			}

			@keyframes mesh-gradient {
				0% {
					background-position: 0% 50%;
				}
				25% {
					background-position: 50% 100%;
				}
				50% {
					background-position: 100% 50%;
				}
				75% {
					background-position: 50% 0%;
				}
				100% {
					background-position: 0% 50%;
				}
			}

			@keyframes float-up {
				from {
					opacity: 0;
					transform: translateY(30px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}

			@keyframes fade-scale-in {
				from {
					opacity: 0;
					transform: scale(0.98);
				}
				to {
					opacity: 1;
					transform: scale(1);
				}
			}

			@keyframes cross-fade {
				0% {
					opacity: 1;
					transform: translateY(0);
				}
				45% {
					opacity: 0;
					transform: translateY(-10px);
				}
				55% {
					opacity: 0;
					transform: translateY(10px);
				}
				100% {
					opacity: 1;
					transform: translateY(0);
				}
			}

			@keyframes slide-out-anim {
				from {
					opacity: 1;
					transform: translateX(0) scale(1);
				}
				to {
					opacity: 0;
					transform: translateX(-50px) scale(0.95);
				}
			}

			@keyframes slide-in-anim {
				from {
					opacity: 0;
					transform: translateX(50px) scale(0.95);
				}
				to {
					opacity: 1;
					transform: translateX(0) scale(1);
				}
			}

			.grandinfo {
				position: relative;
				width: 100%;
				height: 100%;
				display: flex;
				justify-content: center;
				align-items: center;
			}

			.info {
				display: flex;
				flex-direction: row;
				align-items: center;
				justify-content: flex-start;
				gap: 40px;
				width: 95vw;
				aspect-ratio: 16 / 5;
				
				padding: 32px;
				position: relative;
				overflow: visible;
				transform-origin: center center;

				background-color: rgb(0, 0, 0);
				background-image:
					radial-gradient(at 40% 20%, hsla(302,100%,74%,1) 0px, transparent 50%),
					radial-gradient(at 80% 0%, hsla(271,100%,56%,1) 0px, transparent 50%),
					radial-gradient(at 0% 50%, hsla(240,100%,72%,1) 0px, transparent 50%),
					radial-gradient(at 80% 50%, hsla(340,100%,76%,1) 0px, transparent 50%),
					radial-gradient(at 0% 100%, hsla(302,100%,77%,1) 0px, transparent 50%),
					radial-gradient(at 80% 100%, hsla(240,100%,81%,1) 0px, transparent 50%),
					radial-gradient(at 0% 0%, hsla(343,100%,76%,1) 0px, transparent 50%);
				background-size: 200% 200%;
				box-shadow: none !important;
				
				border-radius: 0;
				backdrop-filter: none;
				
				opacity: 0;
				transform: none;
				transition: all 0.3s ease-out;
            	border: 4px solid rgba(255, 255, 255, 0.4);
			}

			.info.show {
				opacity: 1;
				transform: none;
			}

			.info.hide {
				opacity: 0;
				transform: none;
				pointer-events: none;
			}

			.info.animation-done {
				animation: mesh-gradient 16s ease-in-out infinite;
				opacity: 1;
				transform: none;
				transition: none;
			}

			.info::before {
				content: "";
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: none;
				pointer-events: none;
				z-index: 1;
				border-radius: 0;
			}

			.album-container {
				position: relative;
				flex-shrink: 0;
				z-index: 2;
			}

			.info .logo {
				height: 50vh;
				aspect-ratio: 1/1;
				flex: 0 1 auto;
				
				background: rgba(255, 255, 255, 0.05);
				border: 1px solid rgba(255, 255, 255, 0.2);
				object-fit: cover;
				box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
				animation: fade-scale-in 0.5s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
				transition: transform 0.3s ease;
				z-index: 2;
				position: relative;
			}

			.info .logo:hover {
				transform: scale(1.02);
			}

			.info .text-container {
				flex: 1;
				display: flex;
				justify-content: center;
				align-items: center;
				height: 100%;
				min-height: 200px;
				z-index: 2;
				overflow: visible;
			}

			.info .text {
				flex: 1;
				display: flex;
				flex-direction: column;
				align-items: flex-start;
				text-align: left;
				gap: 12px;
				width: 100%;
				height: 100%;
			}

			.info .artist {
				font-weight: 700;
				font-size: 6vw;
				line-height: 1.1;
				background: linear-gradient(135deg, #ffffff 0%, rgba(255, 255, 255, 0.8) 100%);
				-webkit-background-clip: text;
				background-clip: text;
				-webkit-text-fill-color: transparent;
				animation: float-up 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) 0.1s both;
				letter-spacing: -0.03em;
				margin-left: 10px;
			}

			.info .separator {
				display: none;
			}

			.info .title {
				font-size: clamp(1rem, 5vw, 2.2rem);
				opacity: 0.7;
				font-weight: 300;
				color: rgba(255, 255, 255, 0.9);
				animation: float-up 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) 0.2s both;
				letter-spacing: -0.01em;
				font-size: 3.25vw !important;
				margin-left: 10px;
			}

			.info .lyrics {
				font-size: 2rem;
				font-weight: 600;
				text-align: left;
				margin: 0;
				min-height: 3rem;
				color: rgba(255, 255, 255, 0.95);
				animation: float-up 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) 0.3s both;
				letter-spacing: -0.01em;
				transition: color 0.3s ease-in-out;
				text-shadow: 0 2px 8px rgba(0, 0, 0, 0.8), 0 0 16px rgba(0, 0, 0, 0.5);
				overflow: hidden;
				position: relative;
				height: 4rem;
				width: 100%;
			}

			.lyric-wrapper {
				flex: 1;
				position: relative;
				width: calc(100% + 20px);
				min-height: calc(3rem + 20px);
				overflow: hidden;
				padding-left: 20px;
				box-sizing: border-box;
			}

			.lyric-text {
				position: absolute;
				width: 100%;
				height: 100%;
				padding-left: 10px;
				top: 0;
				left: 10px;
				margin: 0;
				padding: 0;
				white-space: nowrap;
				text-overflow: ellipsis;
				box-sizing: border-box;
				line-height: 3rem;
			}

			.lyric-text.entering {
				animation: lyric-in 0.4s ease-out forwards;
			}

			.lyric-text.exiting {
				animation: lyric-out 0.4s ease-out forwards;
			}

			.info .artist,
			.info .separator,
			.info .title {
				vertical-align: middle;
			}

			.slide-out {
				animation: slide-out-anim 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
			}

			.slide-in {
				animation: slide-in-anim 0.5s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
			}

			.text-swap {
				animation: cross-fade 0.5s ease-in-out forwards;
			}

			@keyframes lyric-out {
				from {
					opacity: 1;
					transform: translateY(0);
				}
				to {
					opacity: 0;
					transform: translateY(-30px);
				}
			}

			@keyframes lyric-in {
				from {
					opacity: 0;
					transform: translateY(30px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}

			@keyframes slide-out-anim {
				from {
					opacity: 1;
					transform: translateX(0) scale(1);
				}
				to {
					opacity: 0;
					transform: translateX(-50px) scale(0.95);
				}
			}

			@keyframes slide-in-anim {
				from {
					opacity: 0;
					transform: translateX(50px) scale(0.95);
				}
				to {
					opacity: 1;
					transform: translateX(0) scale(1);
				}
			}

			.progress-bar {
				position: absolute;
				bottom: 0;
				left: 0;
				width: 100%;
				height: 6px;
				background-color: rgba(255, 255, 255, 0.1);
				overflow: hidden;
				z-index: 2;
			}

			.progress-fill {
				width: 0%;
				height: 100%;
				background: linear-gradient(90deg, var(--color, rgb(242, 0, 255)), rgba(255, 255, 255, 0.8));
				transition: width 0.1s linear;
			}
		</style>
		<script>
        	let socket = io();
			let playing = false;
			let imgcache = new Image();
			let lyrics = [];
			let update_interval = null;
			let current_data = null;
			let current_palette = null;
			let animating = false;
			let client_receive_time = 0;
			let progress_at_receive = 0;
			let last_lyric_update_time = 0;
			let current_lyric_index = -1;
			let disableLyrics = false;

			function hslToRgb(h, s, l) {
				s /= 100;
				l /= 100;
				const k = n => (n + h / 30) % 12;
				const a = s * Math.min(l, 1 - l);
				const f = n => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
				return [
					Math.round(255 * f(0)),
					Math.round(255 * f(8)),
					Math.round(255 * f(4))
				];
			}

			function rgbToHsl(r, g, b) {
				r /= 255;
				g /= 255;
				b /= 255;
				const max = Math.max(r, g, b), min = Math.min(r, g, b);
				let h, s, l = (max + min) / 2;
				if (max === min) {
					h = s = 0;
				} else {
					const d = max - min;
					s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
					switch (max) {
						case r: h = (g - b) / d + (g < b ? 6 : 0); break;
						case g: h = (b - r) / d + 2; break;
						case b: h = (r - g) / d + 4; break;
					}
					h /= 6;
				}
				return [
					Math.round(h * 360),
					Math.round(s * 100),
					Math.round(l * 100)
				];
			}

			function rgbToHex(r, g, b) {
				return "#" + [r, g, b].map(x => {
					const hex = x.toString(16);
					return hex.length === 1 ? "0" + hex : hex;
				}).join('');
			}

			function generateComplementaryColors(baseColor) {
				const [h, s, l] = rgbToHsl(baseColor.r, baseColor.g, baseColor.b);
				const generated = [];
				
				generated.push({
					r: baseColor.r,
					g: baseColor.g,
					b: baseColor.b,
					h, s, l,
					rgb: [baseColor.r, baseColor.g, baseColor.b]
				});
				
				const [r1, g1, b1] = hslToRgb((h + 60) % 360, Math.min(s + 10, 100), Math.min(l + 10, 90));
				generated.push({ r: r1, g: g1, b: b1, h: (h + 60) % 360, s: Math.min(s + 10, 100), l: Math.min(l + 10, 90), rgb: [r1, g1, b1] });
			
				const [r2, g2, b2] = hslToRgb((h - 60 + 360) % 360, Math.min(s + 10, 100), Math.min(l + 10, 90));
				generated.push({ r: r2, g: g2, b: b2, h: (h - 60 + 360) % 360, s: Math.min(s + 10, 100), l: Math.min(l + 10, 90), rgb: [r2, g2, b2] });
				
				return generated;
			}

			function extractPaletteFromImage(imgElement) {
				return new Promise((resolve) => {
					try {
						const canvas = document.createElement('canvas');
						const ctx = canvas.getContext('2d');
						canvas.width = 100;
						canvas.height = 100;

						const img = new Image();
						img.crossOrigin = "anonymous";
						img.onload = function() {
							ctx.drawImage(img, 0, 0, 100, 100);
							const imageData = ctx.getImageData(0, 0, 100, 100);
							const data = imageData.data;

							const colorBuckets = {};
							for (let i = 0; i < data.length; i += 4) {
								const r = data[i];
								const g = data[i + 1];
								const b = data[i + 2];
								const a = data[i + 3];

								if (a < 128) continue;

								const key = `${Math.round(r / 8)},${Math.round(g / 8)},${Math.round(b / 8)}`;
								colorBuckets[key] = (colorBuckets[key] || 0) + 1;
							}

							let sortedColors = Object.entries(colorBuckets)
								.sort((a, b) => b[1] - a[1])
								.slice(0, 10)
								.map(([key]) => {
									const [r, g, b] = key.split(',').map(x => parseInt(x) * 8);
									return { r, g, b, rgb: [r, g, b] };
								});

							if (sortedColors.length < 3) {
								const baseColor = sortedColors[0];
								sortedColors = generateComplementaryColors(baseColor);
							}

							sortedColors = sortedColors.map(c => {
								if (!c.h) {
									const [h, s, l] = rgbToHsl(c.r, c.g, c.b);
									return { ...c, h, s, l };
								}
								return c;
							});

							const palette = {
								colors: sortedColors
							};
							resolve(palette);
						};
						img.onerror = function() {
							console.error("Failed to load image for color extraction");
							resolve(null);
						};
						img.src = imgElement.src;
					} catch (err) {
						console.error("Error extracting palette:", err);
						resolve(null);
					}
				});
			}

			function getContrastColor(color) {
				if (!color || !color.rgb) return "rgb(255, 145, 255)";
				const [r, g, b] = color.rgb;
				const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
				return luminance > 0.5 ? "rgb(0, 0, 0)" : "rgb(255, 255, 255)";
			}

			function applyThemeColors(palette) {
				if (!palette || !palette.colors || palette.colors.length === 0) {
					console.log("No palette colors found");
					return;
				}
				
				const colors = palette.colors;

				const vibrantColors = colors
					.map(c => {
						const [h, s, l] = rgbToHsl(c.r, c.g, c.b);
						return { ...c, h, s, l };
					})
					.filter(c => c.s > 30)
					.sort((a, b) => b.s - a.s)
					.slice(0, 3);

				if (vibrantColors.length === 0) {
					vibrantColors.push({
						...colors[0],
						...(rgbToHsl(colors[0].r, colors[0].g, colors[0].b) || { h: 0, s: 0, l: 50 })
					});
					if (colors[1]) {
						vibrantColors.push({
							...colors[1],
							...(rgbToHsl(colors[1].r, colors[1].g, colors[1].b) || { h: 0, s: 0, l: 50 })
						});
					}
				}

				const primary = vibrantColors[0];
				const secondary = vibrantColors[1] || vibrantColors[0];
				const tertiary = vibrantColors[2] || vibrantColors[0];

				const ph = primary.h;
				const ps = primary.s;
				const pl = primary.l;

				const sh = secondary.h;
				const ss = secondary.s;
				const sl = secondary.l;

				const th = tertiary.h;
				const ts = tertiary.s;
				const tl = tertiary.l;

				console.log(`Applying theme - Primary: hsl(${ph}, ${ps}%, ${pl}%)`);

				const shadowColor = `rgba(${Math.max(0, primary.r - 50)}, ${Math.max(0, primary.g - 50)}, ${Math.max(0, primary.b - 50)}, 0.3)`;

				let lyricH = ph;
				let lyricS = Math.min(ps + 30, 100);
				let lyricL = pl < 50 ? Math.max(pl + 60, 70) : Math.min(pl - 30, 50);
				
				if (lyricL < 40) lyricL = 70;
				if (lyricL > 85) lyricL = 40;

				const root = document.documentElement;
				root.style.setProperty('--color', rgbToHex(primary.r, primary.g, primary.b));
				root.style.setProperty('--primary-h', ph);
				root.style.setProperty('--primary-s', ps);
				root.style.setProperty('--primary-l', pl);
				root.style.setProperty('--secondary-h', sh);
				root.style.setProperty('--secondary-s', ss);
				root.style.setProperty('--secondary-l', sl);
				root.style.setProperty('--tertiary-h', th);
				root.style.setProperty('--tertiary-s', ts);
				root.style.setProperty('--tertiary-l', tl);
				root.style.setProperty('--shadow-color', shadowColor);

				const el_info = document.querySelector(".info");
				el_info.style.backgroundImage = `
					radial-gradient(at 40% 20%, hsla(${ph},${ps}%,${Math.min(pl + 20, 90)}%,1) 0px, transparent 50%),
					radial-gradient(at 80% 0%, hsla(${sh},${ss}%,${Math.min(sl + 20, 90)}%,1) 0px, transparent 50%),
					radial-gradient(at 0% 50%, hsla(${th},${ts}%,${Math.min(tl + 20, 90)}%,1) 0px, transparent 50%),
					radial-gradient(at 80% 50%, hsla(${(ph + 180) % 360},${ps}%,${Math.min(pl + 20, 90)}%,1) 0px, transparent 50%),
					radial-gradient(at 0% 100%, hsla(${(sh + 180) % 360},${ss}%,${Math.min(sl + 20, 90)}%,1) 0px, transparent 50%),
					radial-gradient(at 80% 100%, hsla(${(th + 180) % 360},${ts}%,${Math.min(tl + 20, 90)}%,1) 0px, transparent 50%),
					radial-gradient(at 0% 0%, hsla(${ph},${ps}%,${Math.min(pl + 20, 90)}%,1) 0px, transparent 50%)
				`;

				const lyricsEl = document.getElementById('lyrics');
				lyricsEl.style.color = `hsl(${lyricH}, ${lyricS}%, ${lyricL}%)`;

				current_palette = palette;
			}

			function clearLyrics() {
				const lyricWrapper = document.getElementById('lyric-wrapper');
				lyricWrapper.innerHTML = '';
			}

			function parseLRC(lrc) {
				const lines = lrc.split('\n');
				const parsed = [];
				for (const line of lines) {
					const match = line.match(/\[(\d+):(\d+\.\d+)\](.*)/);
					if (match) {
						const min = parseInt(match[1], 10);
						const sec = parseFloat(match[2]);
						const time = min * 60 + sec;
						const text = match[3].trim();
						if (text) parsed.push({ time, text });
					}
				}
				console.log("Parsed Lyrics:", parsed);
				return parsed;
			}

			function update_display(use_interpolation = true, update_lyrics = true) {
				if (!playing || !current_data || !current_data.duration) return;
				let current_progress;
				if (!use_interpolation) {
					current_progress = progress_at_receive;
				} else {
					const now = Date.now() / 1000;
					const elapsed = now - client_receive_time;
					current_progress = Math.min(1, progress_at_receive + elapsed / current_data.duration);
				}
				progress_current = current_progress;
				const current_time = progress_current * current_data.duration;
				const el_progress = document.querySelector(".progress-fill");
				el_progress.style.width = (progress_current * 100) + '%';

				if (update_lyrics && lyrics.length > 0) {
					let correct_index = -1;
					for (let i = 0; i < lyrics.length; i++) {
						if (current_time >= lyrics[i].time && (i === lyrics.length - 1 || current_time < lyrics[i + 1].time)) {
							correct_index = i;
							break;
						}
					}

					if (correct_index !== -1 && correct_index !== current_lyric_index) {
						if (!use_interpolation) {
							animateLyricsChange(lyrics[correct_index].text, correct_index);
						} else {
							const now = Date.now();
							if (now - last_lyric_update_time > 200) {
								last_lyric_update_time = now;
								animateLyricsChange(lyrics[correct_index].text, correct_index);
							}
						}
					}
				}
			}

			function animateLyricsChange(new_text, new_index) {
				const lyricWrapper = document.getElementById('lyric-wrapper');
				const oldLyric = lyricWrapper.querySelector('.lyric-text:not(.exiting)');
				const nextText = (new_text ?? '').trim();

				if (nextText.length === 0) {
					if (oldLyric) {
						oldLyric.classList.add('exiting');
						const removeOld = () => {
							oldLyric.remove();
							oldLyric.removeEventListener('animationend', removeOld);
						};
						oldLyric.addEventListener('animationend', removeOld, { once: true });
					}
					current_lyric_index = -1;
					return;
				}

				if (oldLyric && oldLyric.innerText === nextText) return;

				if (oldLyric) {
					oldLyric.classList.add('exiting');
					const removeOld = () => {
						oldLyric.remove();
						oldLyric.removeEventListener('animationend', removeOld);
					};
					oldLyric.addEventListener('animationend', removeOld, { once: true });
				}

				const newLyric = document.createElement('div');
				newLyric.className = 'lyric-text entering';
				newLyric.innerText = nextText;
				lyricWrapper.appendChild(newLyric);
				void newLyric.offsetWidth;

				const cleanupNew = () => {
					newLyric.classList.remove('entering');
					newLyric.removeEventListener('animationend', cleanupNew);
				};
				newLyric.addEventListener('animationend', cleanupNew, { once: true });

				current_lyric_index = new_index;
			}

			function slide_out() {
				let el_info = document.querySelector(".info");
				el_info.classList.remove("animation-done");
				el_info.classList.add("hide");
				void el_info.offsetWidth;
			}

			function slide_in() {
				let el_info = document.querySelector(".info");
				el_info.classList.remove("hide");
				el_info.classList.add("show");
				void el_info.offsetWidth;
				
				setTimeout(() => {
					el_info.classList.add("animation-done");
				}, 300);
			}

			function transition_track(cb) {
				let el_info = document.querySelector(".info");
				let el_logo = document.querySelector(".info .logo");
				let el_artist = document.querySelector(".info .text .artist");
				let el_title = document.querySelector(".info .text .title");
				
				el_info.classList.remove("animation-done");
				el_info.classList.add("hide");
				void el_info.offsetWidth; 
				
				setTimeout(() => {
					cb();
					
					el_artist.style.animation = 'none';
					el_title.style.animation = 'none';
					document.getElementById('lyrics').style.animation = 'none';
					el_logo.style.animation = 'none';
					void el_artist.offsetWidth;
					void el_title.offsetWidth;
					void document.getElementById('lyrics').offsetWidth;
					void el_logo.offsetWidth;
					el_artist.style.animation = '';
					el_title.style.animation = '';
					document.getElementById('lyrics').style.animation = '';
					el_logo.style.animation = '';
					
					el_info.classList.remove("hide");
					el_info.classList.add("show");
					void el_info.offsetWidth; 
					
					setTimeout(() => {
						el_info.classList.add("animation-done");
						update_display(false, true);
					}, 300);
				}, 300);
			}

			socket.on('connect', () => {
				socket.emit('init_client');
			});

			socket.on('lyrics', (data) => {
				disableLyrics = data.disable || false;
				if (disableLyrics) {
					clearLyrics();
				}
			});

			socket.on('subtext_info', (data) => {
				let text = data.subtext || "";
				let el_subtext = document.getElementById('subtext');
				if (el_subtext.innerText !== text) {
					el_subtext.style.opacity = '0';
					setTimeout(() => {
						el_subtext.innerText = text;
						el_subtext.style.opacity = '0.8';
					}, 150);
				}
			});

			socket.on('playback_info', (data) => {
				console.log("Playback Info:", data);
				current_data = data;
				client_receive_time = Date.now() / 1000;
				progress_at_receive = data.progress || 0;
				let el_info = document.querySelector(".info");
				let el_logo = document.querySelector(".info .logo");
				let el_artist = document.querySelector(".info .text .artist");
				let el_title = document.querySelector(".info .text .title");

				if (!data.is_playing) {
					if (playing) {
						console.log("Stopped playing track.");
						playing = false;
						slide_out();
						if (update_interval) {
							clearInterval(update_interval);
							update_interval = null;
						}
					}
					clearLyrics();
				} else if (!playing) {
					console.log("Started playing track.");
					playing = true;
					let img = data.art_url || "https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png";
					imgcache.src = img;
					el_logo.src = img;
					el_artist.innerText = data.artist_name;
					el_title.innerText = data.title;
					el_artist.style.animation = 'none';
					el_title.style.animation = 'none';
					document.getElementById('lyrics').style.animation = 'none';
					el_logo.style.animation = 'none';
					void el_artist.offsetWidth;
					void el_title.offsetWidth;
					void document.getElementById('lyrics').offsetWidth;
					void el_logo.offsetWidth;
					el_artist.style.animation = '';
					el_title.style.animation = '';
					document.getElementById('lyrics').style.animation = '';
					el_logo.style.animation = '';
					clearLyrics();
					client_receive_time = Date.now() / 1000;
					progress_at_receive = data.progress || 0;
					if (update_interval) clearInterval(update_interval);
					update_interval = setInterval(() => update_display(true, true), 16);
					progress_current = progress_at_receive;
					update_display(false, true);
					slide_in();
					setTimeout(() => {
						extractPaletteFromImage(el_logo).then(palette => {
							applyThemeColors(palette);
						});
					}, 200);
					client_receive_time = Date.now() / 1000;
					progress_at_receive = data.progress || 0;
					update_display(false, true);
				} else {
					let old_artist = el_artist.innerText;
					let old_title = el_title.innerText;
					if (old_artist != data.artist_name || old_title != data.title) {
						console.log("Changed track.");
						let img = data.art_url || "https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png";
						client_receive_time = Date.now() / 1000;
						progress_at_receive = data.progress || 0;
						clearLyrics();
						transition_track(function() {
							el_logo.src = img;
							el_artist.innerText = data.artist_name;
							el_title.innerText = data.title;
							setTimeout(() => {
								extractPaletteFromImage(el_logo).then(palette => {
									applyThemeColors(palette);
								});
							}, 200);
						});
					}
					client_receive_time = Date.now() / 1000;
					progress_at_receive = data.progress || 0;
					update_display(false, false);
				}
			});
			socket.on('playback_lyrics', (data) => {
				console.log("Playback Lyrics:", data);
				if (disableLyrics) return;
				lyrics = parseLRC(data.lyrics);
				current_lyric_index = -1;
				update_display(false, true);
			});
		</script>
	
</body></html>